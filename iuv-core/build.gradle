buildscript {
    repositories {
        mavenCentral()
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

plugins {
    id "com.moowork.node"
    id 'org.jetbrains.kotlin.multiplatform'
}

//apply plugin: 'kotlin-platform-js'
apply plugin: 'maven'
apply plugin: 'kotlinx-serialization'
apply plugin: 'maven-publish'

group 'org.iuv'
version '0.1-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = "https://kotlin.bintray.com/kotlinx"
    }
}

kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm8') {
            // Configure a single target's compilations (main and test)
            compilations.all {
                tasks[compileKotlinTaskName].kotlinOptions {
                    jvmTarget = '1.8'
                }
            }
        }
        
        fromPreset(presets.js, 'js') {
            // Configure a single target's compilations (main and test)
            compilations.all {
                tasks[compileKotlinTaskName].kotlinOptions {
                    moduleKind = "umd"
                    sourceMap = true
                    metaInfo = true
                    sourceMapEmbedSources = "always"
                }
            }
        }
    }

    sourceSets {
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
        jsMain {
            dependencies {
                project(':iuv-shared')
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
                implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:0.9.0'
            }
        }
        jsTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }
    }
}

dependencies {
    //expectedBy project(':iuv-shared')
    //compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    //compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
    //testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
    //compile 'org.jetbrains.kotlinx:kotlinx-html-js:0.6.1'
}

/*compileKotlin2Js {
    kotlinOptions.moduleKind = "umd"
    kotlinOptions.sourceMap = true
    kotlinOptions.metaInfo = true
    kotlinOptions.sourceMapEmbedSources = "always"
}

compileTestKotlin2Js { kotlinOptions.moduleKind = 'umd' }
*/
node {
    download = true
}

task yarnInstall(type: YarnTask) {
    args = ['install']
}

/*
task installMocha(type: NpmTask) {
    args = ['install', 'mocha']
}
*/

task populateNodeModules(type: Copy, dependsOn: jsTestClasses) {
    def jsTarget = kotlin.targets.js

    from(jsTarget.compilations.main.output) {
        include '**/*.js'
        // To flatten files
        eachFile { details ->
            details.path = details.name
        }
    }

    //configurations.each { println it.name }

    configurations.jsTestCompile.each {
        from zipTree(it.absolutePath).matching { include '*.js' }
    }

    into "${buildDir}/node_modules"

    includeEmptyDirs = false
}

/*
task runMocha(type: NodeTask, dependsOn: [compileTestKotlin2Js, populateNodeModules, installMocha]) {
    script = file('node_modules/mocha/bin/mocha')
    args = [compileTestKotlin2Js.outputFile]
}

test.dependsOn runMocha
*/

task runKarma(type: YarnTask, dependsOn: [populateNodeModules, yarnInstall]) {
    args = ['test']
}

jsTest.dependsOn runKarma

publishToMavenLocal.dependsOn jsTest