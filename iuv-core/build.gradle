buildscript {
    repositories {
        mavenCentral()
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlinx:kotlinx-gradle-serialization-plugin:$serialization_version"
    }
}

plugins {
    id "com.moowork.node"
}

apply plugin: 'kotlin-platform-js'
apply plugin: 'maven'
apply plugin: 'kotlinx-serialization'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = "https://kotlin.bintray.com/kotlinx"
    }

}

dependencies {
    expectedBy project(':iuv-shared')
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
    //compile 'org.jetbrains.kotlinx:kotlinx-html-js:0.6.1'
}

compileKotlin2Js {
    kotlinOptions.moduleKind = "umd"
    kotlinOptions.sourceMap = true
    kotlinOptions.metaInfo = true
    kotlinOptions.sourceMapEmbedSources = "always"
}

compileTestKotlin2Js { kotlinOptions.moduleKind = 'umd' }

node {
    download = true
}

task yarnInstall(type: YarnTask) {
    args = ['install']
}

/*
task installMocha(type: NpmTask) {
    args = ['install', 'mocha']
}
*/

task populateNodeModules(type: Copy, dependsOn: compileTestKotlin2Js) {
    from(compileKotlin2Js.destinationDir) {
        include '**/*.js'
        // To flatten files
        eachFile { details ->
            details.path = details.name
        }
    }

    configurations.testCompile.each {
        from zipTree(it.absolutePath).matching { include '*.js' }
    }

    into "${buildDir}/node_modules"

    includeEmptyDirs = false
}

/*
task runMocha(type: NodeTask, dependsOn: [compileTestKotlin2Js, populateNodeModules, installMocha]) {
    script = file('node_modules/mocha/bin/mocha')
    args = [compileTestKotlin2Js.outputFile]
}

test.dependsOn runMocha
*/

task runKarma(type: YarnTask, dependsOn: [populateNodeModules, yarnInstall]) {
    args = ['test']
}

test.dependsOn runKarma

install.dependsOn test