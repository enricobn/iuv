build.doLast() {

    /*
    for (conf in configurations) {
        if (conf.canBeResolved) {
            println(conf.name)
        }
    }

     */

    // Copy kotlin.js and kotlin.meta.js from jar into web directory
    copyConfigurationFiles(configurations.jsDefault)

    // Copy kotlin-test.js and kotlin-test.meta.js from jar into web directory
    // TODO does it work?
    copyConfigurationFiles(configurations.testCompile)

//     // Unpack build contents
//     // TODO Remove this step when a CDN link is available.
//    copy {
//        File[] artifacts = [
//                new File("build/libs/${project.name}-${project.version}.jar"),
//                new File("build/libs/${project.name}-${project.version}-tests.jar")
//        ]
//
//        includeEmptyDirs = false
//
//        for (File artifact : artifacts) {
//            from zipTree(artifact)
//            into "${web_dir}/classes"
//            include { fileTreeElement ->
//                def path = fileTreeElement.path
//                !(path.startsWith("META-INF/") || path.startsWith("${project.name}"))
//            }
//        }
//    }

    copy {
        includeEmptyDirs = false
        from project.fileTree("build/distributions").files
        into "${web_dir}/classes"
        include "*.js"
        include "*.js.map"
    }

    copy {
        includeEmptyDirs = false
        from project.fileTree("build/classes/kotlin/test").files
        into "${web_dir}/classes"
        include "*.js"
        include "*.js.map"
    }

    copy {
        includeEmptyDirs = false
        from project.file("build/resources/kotlin/test")
        into "${web_dir}"
    }

    copy {
        includeEmptyDirs = false
        from project.fileTree("web")
        into "${web_dir}"
    }

    copy {
        from("${projectDir}/node_modules/snabbdom/dist")
        into "${web_dir}/js"
        include "*.min.js"
    }

}

private Iterable<File> copyConfigurationFiles(Configuration compile) {
    compile.each { File file ->
        //println("HENRY file" + file)
        copy {
            includeEmptyDirs = false

            from zipTree(file.absolutePath)
            into "${web_dir}/lib"
            include { fileTreeElement ->
                def path = fileTreeElement.path
                //println("HENRY path " + path)
                (path.endsWith(".js") || path.endsWith(".js.map")) //&& (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
            }
        }
    }
}