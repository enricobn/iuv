build.doLast() {

    /*
    for (conf in configurations) {
        if (conf.canBeResolved) {
            println(conf.name)
            conf.each { File file ->
                if (file.toString().endsWith(".js") || file.toString().endsWith(".jar"))
                    println("  " + file)
            }
        }
    }
     */

    if (!project.hasProperty('web_fat') || web_fat) {
        copy {
            includeEmptyDirs = false
            from project.fileTree("build/distributions").files
            into "${web_dir}/js"
            include "*.js"
            include "*.js.map"
        }
    } else {
        copyConfigurationFiles(configurations.testRuntimeClasspath)

        project.file("build/libs").listFiles().each { file ->
            if (!file.path.endsWith("-sources.jar")) {
                copy {
                    includeEmptyDirs = false

                    from zipTree(file.absolutePath)
                    into "${web_dir}/js"
                    include { fileTreeElement ->
                        def path = fileTreeElement.path
                        def valid = !path.contains("/") && (path.endsWith(".js") || path.endsWith(".js.map"))
                        if (valid)
                            println("HENRY $path")
                        valid
                    }
                }
            }
        }
    }

    copy {
        includeEmptyDirs = false
        from project.fileTree("build/classes/kotlin/test").files
        into "${web_dir}/js"
        include "*.js"
        include "*.js.map"
    }

    copy {
        includeEmptyDirs = false
        from project.file("build/resources/kotlin/test")
        into "${web_dir}"
    }

    copy {
        includeEmptyDirs = false
        from project.fileTree("web")
        into "${web_dir}"
    }

}

private Iterable<File> copyConfigurationFiles(Configuration compile) {
    compile.each { File file ->
        if (file.toString().endsWith(".js")) {
            copy {
                from file
                into "${web_dir}/js"
            }
        } else if (file.toString().endsWith(".jar")) {
            copy {
                includeEmptyDirs = false

                from zipTree(file.absolutePath)
                into "${web_dir}/js"
                include { fileTreeElement ->
                    def path = fileTreeElement.path
                    path.endsWith(".js") || path.endsWith(".js.map")
                }
            }
        }
    }
}