buildscript {
    ext.springVersion = '5.0.5.RELEASE'

    repositories {
        mavenCentral()
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlin_version}")
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm'
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://kotlin.bintray.com/kotlinx" }
}

apply plugin: 'kotlin-spring'
apply plugin: 'kotlinx-serialization'
apply plugin: 'kotlin-platform-jvm'
apply plugin: 'maven-publish'

dependencies {
    compile("org.springframework:spring-web:$springVersion")
    compile("org.springframework:spring-webmvc:$springVersion")
    compile("org.springframework:spring-messaging:$springVersion")
    compile("org.springframework:spring-websocket:$springVersion")
    compile('javax.servlet:javax.servlet-api:4.0.0')
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
    compile("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")
    // compileOnly means that iuv core is not exposed to users so must be included manually.
    // If I set it as compile, then the user project won't compile because it searches for a iuv-core library,
    // but there is not, there is a iuv-core-jvm8 library and must be included manually.  
    compileOnly project(':iuv-core')

    testCompile "junit:junit:4.12"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

publishToMavenLocal.dependsOn test

publishing {
    publications {
        mavenKotlin(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}