package {{context.clientPackage}}

import kotlinx.serialization.ImplicitReflectionSerializer
import org.iuv.shared.Task
import org.iuv.core.Http
import org.iuv.core.HttpMethod

{{#api.clientImports}}
import {{fullClassName}}
{{#last}}

{{/last}}
{{/api.clientImports}}
object {{api.name}}Client {
    private const val baseUrl = "{{{api.baseUrl}}}"
{{#api.paths}}
  {{#operations}}

    @ImplicitReflectionSerializer
    fun {{name}}({{#parameters}}{{name}} : {{{type}}}{{^last}}, {{/last}}{{/parameters}}) : Task<String,{{{resultType}}}> =
        Http.runner({{op.clientMethod}}, "$baseUrl{{pathSubst}}", {{resultType.serializer.code}})
            {{#bodyType}}
            .body(body, {{serializer.code}})
            {{/bodyType}}
            {{#hasFormData}}
            .formData(
                {{#formData}}
                "{{name}}" to {{name}}{{^last}}, {{/last}}
                {{/formData}}
            )
            {{/hasFormData}}
            {{#hasClientQueryParams}}
            .queryParams(
                {{#clientQueryParams}}
                "{{name}}" to {{name}}{{^last}}, {{/last}}
                {{/clientQueryParams}}
            )
            {{/hasClientQueryParams}}
            {{#hasMultiPartData}}
            .multiPartData(
                {{#multiPartData}}
                MultiPartData.of("{{name}}", {{name}}){{^last}}, {{/last}}
                {{/multiPartData}}
            )
            {{/hasMultiPartData}}
            {{#hasHeaders}}
            .headers({{#headers}}"{{name}}" to {{name}}{{^last}}, {{/last}}{{/headers}})
            {{/hasHeaders}}
            .run()
  {{/operations}}
{{/api.paths}}

}