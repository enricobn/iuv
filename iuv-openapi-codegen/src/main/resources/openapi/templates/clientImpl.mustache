package {{context.clientPackage}}

{{#api.clientImplImports}}
import {{fullClassName}}
{{#last}}

{{/last}}
{{/api.clientImplImports}}
class {{api.name}}ApiImpl(private val baseUrl : String = "{{{api.baseUrl}}}") : {{api.name}}Api {
    private var authentication : Authentication? = null

    override fun authenticate(authentication: Authentication) {
        this.authentication = authentication
    }
{{#api.paths}}
  {{#operations}}

    @ImplicitReflectionSerializer
    override fun {{name}}({{#parameters}}{{name}} : {{{type}}}{{^required}}?{{/required}}{{^last}}, {{/last}}{{/parameters}}) : Task<HttpError,HttpResult<{{{resultType}}}{{#nullableResult}}?{{/nullableResult}}>> {
        val path = "{{pathSubst}}".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner({{op.clientMethod}}, fullPath)
            {{#bodyType}}
            .body(body, {{serializer.code}})
            {{/bodyType}}
            {{#hasFormData}}
            .formData(
                {{#formData}}
                "{{name}}" to {{name}}{{^last}},{{/last}}
                {{/formData}}
            )
            {{/hasFormData}}
            {{#hasClientQueryParams}}
            .queryParams(
                {{#clientQueryParams}}
                "{{name}}" to {{name}}{{^last}},{{/last}}
                {{/clientQueryParams}}
            )
            {{/hasClientQueryParams}}
            {{#hasMultiPartData}}
            .multiPartData(
                {{#multiPartData}}
                MultiPartData.of("{{name}}", {{name}}){{^last}},{{/last}}
                {{/multiPartData}}
            )
            {{/hasMultiPartData}}
            {{#hasHeaders}}
            .headers({{#headers}}"{{name}}" to {{name}}{{^last}},{{/last}}{{/headers}})
            {{/hasHeaders}}
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        {{#nullableResult}}
        return runner.run<{{{resultType}}} , {{{resultType}}}?>({{resultType.serializer.code}})
        {{/nullableResult}}
        {{^nullableResult}}
        return runner.run({{resultType.serializer.code}})
        {{/nullableResult}}
    }
  {{/operations}}
{{/api.paths}}

    private fun httpRequestRunner(method: HttpMethod, fullPath: String): HttpRequestRunner {
        console.log("creating httpRequestRunner")
        val runner = Http.runner(method, fullPath)

        val meta = document.getElementsByTagName("meta")
        val csrfHeader = meta["_csrf_header"]?.getAttribute("content")
        val csrf = meta["_csrf"]?.getAttribute("content")

        if (!csrf.isNullOrEmpty() && !csrfHeader.isNullOrEmpty()) {
            runner.header(csrfHeader, csrf)
        }

        return runner
    }
}