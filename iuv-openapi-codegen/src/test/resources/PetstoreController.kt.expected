package org.iuv.test.controllers

import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.DeleteMapping
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.PathVariable
import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.PutMapping
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestHeader
import org.springframework.web.bind.annotation.RequestParam
import org.springframework.web.bind.annotation.RequestPart
import org.springframework.web.multipart.MultipartFile
import org.iuv.test.models.ApiResponse
import org.iuv.test.models.Order
import org.iuv.test.models.Pet
import org.iuv.test.models.User

interface PetStoreController {

    @PostMapping("v2/pet")
    fun addPet(@RequestBody body : Pet) : ResponseEntity<Pet>

    @PutMapping("v2/pet")
    fun updatePet(@RequestBody body : Pet) : ResponseEntity<Pet>

    @GetMapping("v2/pet/findByStatus")
    fun findPetsByStatus(@RequestParam status : List<String>) : ResponseEntity<List<Pet>>

    @GetMapping("v2/pet/findByTags")
    fun findPetsByTags(@RequestParam tags : List<String>) : ResponseEntity<List<Pet>>

    @GetMapping("v2/pet/{petId}")
    fun getPetById(@PathVariable petId : Long) : ResponseEntity<Pet>

    @PostMapping("v2/pet/{petId}")
    fun updatePetWithForm(@PathVariable petId : Long, @RequestParam name : String? = null, @RequestParam status : String? = null) : ResponseEntity<Unit>

    @DeleteMapping("v2/pet/{petId}")
    fun deletePet(@RequestHeader api_key : String? = null, @PathVariable petId : Long) : ResponseEntity<Unit>

    @PostMapping("v2/pet/{petId}/uploadImage")
    fun uploadFile(@PathVariable petId : Long, @RequestParam additionalMetadata : String? = null, @RequestPart file : MultipartFile? = null) : ResponseEntity<ApiResponse>

    @GetMapping("v2/store/inventory")
    fun getInventory() : ResponseEntity<Map<String, Int>>

    @PostMapping("v2/store/order")
    fun placeOrder(@RequestBody body : Order) : ResponseEntity<Order>

    @GetMapping("v2/store/order/{orderId}")
    fun getOrderById(@PathVariable orderId : Long) : ResponseEntity<Order>

    @DeleteMapping("v2/store/order/{orderId}")
    fun deleteOrder(@PathVariable orderId : Long) : ResponseEntity<Unit>

    @PostMapping("v2/user")
    fun createUser(@RequestBody body : User) : ResponseEntity<Unit>

    @PostMapping("v2/user/createWithArray")
    fun createUsersWithArrayInput(@RequestBody body : List<User>) : ResponseEntity<Unit>

    @PostMapping("v2/user/createWithList")
    fun createUsersWithListInput(@RequestBody body : List<User>) : ResponseEntity<Unit>

    @GetMapping("v2/user/login")
    fun loginUser(@RequestParam username : String, @RequestParam password : String) : ResponseEntity<String>

    @GetMapping("v2/user/logout")
    fun logoutUser() : ResponseEntity<Unit>

    @GetMapping("v2/user/{username}")
    fun getUserByName(@PathVariable username : String) : ResponseEntity<User>

    @PutMapping("v2/user/{username}")
    fun updateUser(@PathVariable username : String, @RequestBody body : User) : ResponseEntity<User>

    @DeleteMapping("v2/user/{username}")
    fun deleteUser(@PathVariable username : String) : ResponseEntity<Unit>

}