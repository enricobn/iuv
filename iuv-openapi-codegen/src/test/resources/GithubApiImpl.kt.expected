package org.iuv.test.client

import kotlinx.browser.document
import kotlinx.serialization.InternalSerializationApi
import kotlinx.serialization.builtins.ListSerializer
import kotlinx.serialization.serializer
import org.w3c.dom.get
import org.iuv.core.Authentication
import org.iuv.core.Http
import org.iuv.core.HttpError
import org.iuv.core.HttpMethod
import org.iuv.core.HttpRequestRunner
import org.iuv.core.HttpResult
import org.iuv.shared.Task
import org.iuv.test.models.Event

@InternalSerializationApi
class NetworksApiImpl(private val baseUrl : String = "https://api.github.com") : NetworksApi {
    private var authentication : Authentication? = null

    override fun authenticate(authentication: Authentication) {
        this.authentication = authentication
    }

    override fun getNetworksByOwnerByRepoEvents(owner : String, repo : String, Accept : String?) : Task<HttpError,HttpResult<List<Event>>> {
        val path = "/networks/$owner/$repo/events".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Get, fullPath)
            .headers("Accept" to Accept)
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(ListSerializer(Event::class.serializer()))
    }

    private fun httpRequestRunner(method: HttpMethod, fullPath: String): HttpRequestRunner {
        console.log("creating httpRequestRunner")
        val runner = Http.runner(method, fullPath)

        val meta = document.getElementsByTagName("meta")
        val csrfHeader = meta["_csrf_header"]?.getAttribute("content")
        val csrf = meta["_csrf"]?.getAttribute("content")

        if (!csrf.isNullOrEmpty() && !csrfHeader.isNullOrEmpty()) {
            runner.header(csrfHeader, csrf)
        }

        return runner
    }
}