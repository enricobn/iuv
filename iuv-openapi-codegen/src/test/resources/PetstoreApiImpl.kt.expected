package org.iuv.test.client

import kotlin.browser.document
import kotlinx.serialization.ImplicitReflectionSerializer
import kotlinx.serialization.internal.ArrayListSerializer
import kotlinx.serialization.internal.HashMapSerializer
import kotlinx.serialization.internal.IntSerializer
import kotlinx.serialization.internal.StringSerializer
import kotlinx.serialization.internal.UnitSerializer
import kotlinx.serialization.serializer
import org.w3c.dom.get
import org.iuv.core.Authentication
import org.iuv.core.Http
import org.iuv.core.HttpError
import org.iuv.core.HttpMethod
import org.iuv.core.HttpRequestRunner
import org.iuv.core.HttpResult
import org.iuv.core.MultiPartData
import org.iuv.core.MultipartFile
import org.iuv.shared.Task
import org.iuv.test.models.ApiResponse
import org.iuv.test.models.Order
import org.iuv.test.models.Pet
import org.iuv.test.models.User

class PetstoreApiImpl(private val baseUrl : String = "https://petstore.swagger.io/v2") : PetstoreApi {
    private var authentication : Authentication? = null

    override fun authenticate(authentication: Authentication) {
        this.authentication = authentication
    }

    @ImplicitReflectionSerializer
    override fun addPet(body : Pet) : Task<HttpError,HttpResult<Pet>> {
        val path = "/pet".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Post, fullPath)
            .body(body, Pet::class.serializer())
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(Pet::class.serializer())
    }

    @ImplicitReflectionSerializer
    override fun updatePet(body : Pet) : Task<HttpError,HttpResult<Pet>> {
        val path = "/pet".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Put, fullPath)
            .body(body, Pet::class.serializer())
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(Pet::class.serializer())
    }

    @ImplicitReflectionSerializer
    override fun findPetsByStatus(status : List<String>) : Task<HttpError,HttpResult<List<Pet>>> {
        val path = "/pet/findByStatus".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Get, fullPath)
            .queryParams(
                "status" to status
            )
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(ArrayListSerializer(Pet::class.serializer()))
    }

    @ImplicitReflectionSerializer
    override fun findPetsByTags(tags : List<String>) : Task<HttpError,HttpResult<List<Pet>>> {
        val path = "/pet/findByTags".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Get, fullPath)
            .queryParams(
                "tags" to tags
            )
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(ArrayListSerializer(Pet::class.serializer()))
    }

    @ImplicitReflectionSerializer
    override fun getPetById(petId : Long) : Task<HttpError,HttpResult<Pet>> {
        val path = "/pet/$petId".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Get, fullPath)
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(Pet::class.serializer())
    }

    @ImplicitReflectionSerializer
    override fun updatePetWithForm(petId : Long, name : String?, status : String?) : Task<HttpError,HttpResult<Unit>> {
        val path = "/pet/$petId".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Post, fullPath)
            .formData(
                "name" to name,
                "status" to status
            )
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(UnitSerializer)
    }

    @ImplicitReflectionSerializer
    override fun deletePet(api_key : String?, petId : Long) : Task<HttpError,HttpResult<Unit>> {
        val path = "/pet/$petId".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Delete, fullPath)
            .headers("api_key" to api_key)
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(UnitSerializer)
    }

    @ImplicitReflectionSerializer
    override fun uploadFile(petId : Long, additionalMetadata : String?, file : MultipartFile?) : Task<HttpError,HttpResult<ApiResponse>> {
        val path = "/pet/$petId/uploadImage".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Post, fullPath)
            .multiPartData(
                MultiPartData.of("additionalMetadata", additionalMetadata),
                MultiPartData.of("file", file)
            )
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(ApiResponse::class.serializer())
    }

    @ImplicitReflectionSerializer
    override fun getInventory() : Task<HttpError,HttpResult<Map<String, Int>>> {
        val path = "/store/inventory".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Get, fullPath)
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(HashMapSerializer(StringSerializer,IntSerializer))
    }

    @ImplicitReflectionSerializer
    override fun placeOrder(body : Order) : Task<HttpError,HttpResult<Order>> {
        val path = "/store/order".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Post, fullPath)
            .body(body, Order::class.serializer())
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(Order::class.serializer())
    }

    @ImplicitReflectionSerializer
    override fun getOrderById(orderId : Long) : Task<HttpError,HttpResult<Order>> {
        val path = "/store/order/$orderId".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Get, fullPath)
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(Order::class.serializer())
    }

    @ImplicitReflectionSerializer
    override fun deleteOrder(orderId : Long) : Task<HttpError,HttpResult<Unit>> {
        val path = "/store/order/$orderId".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Delete, fullPath)
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(UnitSerializer)
    }

    @ImplicitReflectionSerializer
    override fun createUser(body : User) : Task<HttpError,HttpResult<Unit>> {
        val path = "/user".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Post, fullPath)
            .body(body, User::class.serializer())
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(UnitSerializer)
    }

    @ImplicitReflectionSerializer
    override fun createUsersWithArrayInput(body : List<User>) : Task<HttpError,HttpResult<Unit>> {
        val path = "/user/createWithArray".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Post, fullPath)
            .body(body, ArrayListSerializer(User::class.serializer()))
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(UnitSerializer)
    }

    @ImplicitReflectionSerializer
    override fun createUsersWithListInput(body : List<User>) : Task<HttpError,HttpResult<Unit>> {
        val path = "/user/createWithList".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Post, fullPath)
            .body(body, ArrayListSerializer(User::class.serializer()))
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(UnitSerializer)
    }

    @ImplicitReflectionSerializer
    override fun loginUser(username : String, password : String) : Task<HttpError,HttpResult<String>> {
        val path = "/user/login".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Get, fullPath)
            .queryParams(
                "username" to username,
                "password" to password
            )
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(StringSerializer)
    }

    @ImplicitReflectionSerializer
    override fun logoutUser() : Task<HttpError,HttpResult<Unit>> {
        val path = "/user/logout".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Get, fullPath)
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(UnitSerializer)
    }

    @ImplicitReflectionSerializer
    override fun getUserByName(username : String) : Task<HttpError,HttpResult<User>> {
        val path = "/user/$username".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Get, fullPath)
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(User::class.serializer())
    }

    @ImplicitReflectionSerializer
    override fun updateUser(username : String, body : User) : Task<HttpError,HttpResult<User>> {
        val path = "/user/$username".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Put, fullPath)
            .body(body, User::class.serializer())
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(User::class.serializer())
    }

    @ImplicitReflectionSerializer
    override fun deleteUser(username : String) : Task<HttpError,HttpResult<Unit>> {
        val path = "/user/$username".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Delete, fullPath)
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(UnitSerializer)
    }

    private fun httpRequestRunner(method: HttpMethod, fullPath: String): HttpRequestRunner {
        console.log("creating httpRequestRunner")
        val runner = Http.runner(method, fullPath)

        val meta = document.getElementsByTagName("meta")
        val csrfHeader = meta["_csrf_header"]?.getAttribute("content")
        val csrf = meta["_csrf"]?.getAttribute("content")

        if (!csrf.isNullOrEmpty() && !csrfHeader.isNullOrEmpty()) {
            runner.header(csrfHeader, csrf)
        }

        return runner
    }
}