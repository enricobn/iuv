package org.iuv.test.client

import kotlinx.serialization.ImplicitReflectionSerializer
import kotlinx.serialization.internal.ArrayListSerializer
import kotlinx.serialization.internal.HashMapSerializer
import kotlinx.serialization.internal.IntSerializer
import kotlinx.serialization.internal.StringSerializer
import kotlinx.serialization.internal.UnitSerializer
import kotlinx.serialization.serializer
import org.iuv.core.Authentication
import org.iuv.core.Http
import org.iuv.core.HttpError
import org.iuv.core.HttpMethod
import org.iuv.core.HttpResult
import org.iuv.core.MultiPartData
import org.iuv.core.MultipartFile
import org.iuv.shared.Task
import org.iuv.test.models.ApiResponse
import org.iuv.test.models.Order
import org.iuv.test.models.Pet
import org.iuv.test.models.User

class PetstoreApiImpl(private val baseUrl : String = "https://petstore.swagger.io/v2") : PetstoreApi {
    private var authentication : Authentication? = null

    override fun authenticate(authentication: Authentication) {
        this.authentication = authentication
    }

    @ImplicitReflectionSerializer
    override fun addPet(body : Pet) : Task<HttpError,HttpResult<Pet>> {
        val runner = Http.runner(HttpMethod.Post, "$baseUrl/pet")
            .body(body, Pet::class.serializer())
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(Pet::class.serializer())
    }

    @ImplicitReflectionSerializer
    override fun updatePet(body : Pet) : Task<HttpError,HttpResult<Pet>> {
        val runner = Http.runner(HttpMethod.Put, "$baseUrl/pet")
            .body(body, Pet::class.serializer())
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(Pet::class.serializer())
    }

    @ImplicitReflectionSerializer
    override fun findPetsByStatus(status : List<String>) : Task<HttpError,HttpResult<List<Pet>>> {
        val runner = Http.runner(HttpMethod.Get, "$baseUrl/pet/findByStatus")
            .queryParams(
                "status" to status
            )
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(ArrayListSerializer(Pet::class.serializer()))
    }

    @ImplicitReflectionSerializer
    override fun findPetsByTags(tags : List<String>) : Task<HttpError,HttpResult<List<Pet>>> {
        val runner = Http.runner(HttpMethod.Get, "$baseUrl/pet/findByTags")
            .queryParams(
                "tags" to tags
            )
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(ArrayListSerializer(Pet::class.serializer()))
    }

    @ImplicitReflectionSerializer
    override fun getPetById(petId : Long) : Task<HttpError,HttpResult<Pet>> {
        val runner = Http.runner(HttpMethod.Get, "$baseUrl/pet/$petId")
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(Pet::class.serializer())
    }

    @ImplicitReflectionSerializer
    override fun updatePetWithForm(petId : Long, name : String?, status : String?) : Task<HttpError,HttpResult<Unit>> {
        val runner = Http.runner(HttpMethod.Post, "$baseUrl/pet/$petId")
            .formData(
                "name" to name,
                "status" to status
            )
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(UnitSerializer)
    }

    @ImplicitReflectionSerializer
    override fun deletePet(api_key : String?, petId : Long) : Task<HttpError,HttpResult<Unit>> {
        val runner = Http.runner(HttpMethod.Delete, "$baseUrl/pet/$petId")
            .headers("api_key" to api_key)
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(UnitSerializer)
    }

    @ImplicitReflectionSerializer
    override fun uploadFile(petId : Long, additionalMetadata : String?, file : MultipartFile?) : Task<HttpError,HttpResult<ApiResponse>> {
        val runner = Http.runner(HttpMethod.Post, "$baseUrl/pet/$petId/uploadImage")
            .multiPartData(
                MultiPartData.of("additionalMetadata", additionalMetadata),
                MultiPartData.of("file", file)
            )
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(ApiResponse::class.serializer())
    }

    @ImplicitReflectionSerializer
    override fun getInventory() : Task<HttpError,HttpResult<Map<String, Int>>> {
        val runner = Http.runner(HttpMethod.Get, "$baseUrl/store/inventory")
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(HashMapSerializer(StringSerializer,IntSerializer))
    }

    @ImplicitReflectionSerializer
    override fun placeOrder(body : Order) : Task<HttpError,HttpResult<Order>> {
        val runner = Http.runner(HttpMethod.Post, "$baseUrl/store/order")
            .body(body, Order::class.serializer())
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(Order::class.serializer())
    }

    @ImplicitReflectionSerializer
    override fun getOrderById(orderId : Long) : Task<HttpError,HttpResult<Order>> {
        val runner = Http.runner(HttpMethod.Get, "$baseUrl/store/order/$orderId")
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(Order::class.serializer())
    }

    @ImplicitReflectionSerializer
    override fun deleteOrder(orderId : Long) : Task<HttpError,HttpResult<Unit>> {
        val runner = Http.runner(HttpMethod.Delete, "$baseUrl/store/order/$orderId")
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(UnitSerializer)
    }

    @ImplicitReflectionSerializer
    override fun createUser(body : User) : Task<HttpError,HttpResult<Unit>> {
        val runner = Http.runner(HttpMethod.Post, "$baseUrl/user")
            .body(body, User::class.serializer())
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(UnitSerializer)
    }

    @ImplicitReflectionSerializer
    override fun createUsersWithArrayInput(body : List<User>) : Task<HttpError,HttpResult<Unit>> {
        val runner = Http.runner(HttpMethod.Post, "$baseUrl/user/createWithArray")
            .body(body, ArrayListSerializer(User::class.serializer()))
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(UnitSerializer)
    }

    @ImplicitReflectionSerializer
    override fun createUsersWithListInput(body : List<User>) : Task<HttpError,HttpResult<Unit>> {
        val runner = Http.runner(HttpMethod.Post, "$baseUrl/user/createWithList")
            .body(body, ArrayListSerializer(User::class.serializer()))
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(UnitSerializer)
    }

    @ImplicitReflectionSerializer
    override fun loginUser(username : String, password : String) : Task<HttpError,HttpResult<String>> {
        val runner = Http.runner(HttpMethod.Get, "$baseUrl/user/login")
            .queryParams(
                "username" to username,
                "password" to password
            )
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(StringSerializer)
    }

    @ImplicitReflectionSerializer
    override fun logoutUser() : Task<HttpError,HttpResult<Unit>> {
        val runner = Http.runner(HttpMethod.Get, "$baseUrl/user/logout")
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(UnitSerializer)
    }

    @ImplicitReflectionSerializer
    override fun getUserByName(username : String) : Task<HttpError,HttpResult<User>> {
        val runner = Http.runner(HttpMethod.Get, "$baseUrl/user/$username")
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(User::class.serializer())
    }

    @ImplicitReflectionSerializer
    override fun updateUser(username : String, body : User) : Task<HttpError,HttpResult<User>> {
        val runner = Http.runner(HttpMethod.Put, "$baseUrl/user/$username")
            .body(body, User::class.serializer())
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(User::class.serializer())
    }

    @ImplicitReflectionSerializer
    override fun deleteUser(username : String) : Task<HttpError,HttpResult<Unit>> {
        val runner = Http.runner(HttpMethod.Delete, "$baseUrl/user/$username")
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(UnitSerializer)
    }

}