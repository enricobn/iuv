package org.iuv.test.client

import kotlinx.browser.document
import kotlinx.serialization.InternalSerializationApi
import kotlinx.serialization.builtins.ListSerializer
import kotlinx.serialization.builtins.serializer
import kotlinx.serialization.serializer
import org.w3c.dom.get
import org.iuv.core.Authentication
import org.iuv.core.Http
import org.iuv.core.HttpError
import org.iuv.core.HttpMethod
import org.iuv.core.HttpRequestRunner
import org.iuv.core.HttpResult
import org.iuv.shared.Task
import org.iuv.test.models.NewPet
import org.iuv.test.models.Pet

@InternalSerializationApi
class PetStoreApiImpl(private val baseUrl : String = "http://petstore.swagger.io/api") : PetStoreApi {
    private var authentication : Authentication? = null

    override fun authenticate(authentication: Authentication) {
        this.authentication = authentication
    }

    override fun findPets(tags : List<String>?, limit : Int?) : Task<HttpError,HttpResult<List<Pet>>> {
        val path = "/pets".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Get, fullPath)
            .queryParams(
                "tags" to tags,
                "limit" to limit
            )
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(ListSerializer(Pet::class.serializer()))
    }

    override fun addPet(body : NewPet) : Task<HttpError,HttpResult<Pet>> {
        val path = "/pets".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Post, fullPath)
            .body(body, NewPet::class.serializer())
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(Pet::class.serializer())
    }

    override fun findPetById(id : Long) : Task<HttpError,HttpResult<Pet>> {
        val path = "/pets/$id".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Get, fullPath)
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(Pet::class.serializer())
    }

    override fun deletePet(id : Long) : Task<HttpError,HttpResult<Unit>> {
        val path = "/pets/$id".removePrefix("/")
        val fullPath = "$baseUrl/$path".removePrefix("/")

        val runner = httpRequestRunner(HttpMethod.Delete, fullPath)
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(Unit.serializer())
    }

    private fun httpRequestRunner(method: HttpMethod, fullPath: String): HttpRequestRunner {
        console.log("creating httpRequestRunner")
        val runner = Http.runner(method, fullPath)

        val meta = document.getElementsByTagName("meta")
        val csrfHeader = meta["_csrf_header"]?.getAttribute("content")
        val csrf = meta["_csrf"]?.getAttribute("content")

        if (!csrf.isNullOrEmpty() && !csrfHeader.isNullOrEmpty()) {
            runner.header(csrfHeader, csrf)
        }

        return runner
    }
}