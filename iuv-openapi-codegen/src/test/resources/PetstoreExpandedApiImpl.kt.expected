package org.iuv.test.client

import kotlinx.serialization.ImplicitReflectionSerializer
import kotlinx.serialization.internal.ArrayListSerializer
import kotlinx.serialization.internal.UnitSerializer
import kotlinx.serialization.serializer
import org.iuv.core.Authentication
import org.iuv.core.Http
import org.iuv.core.HttpError
import org.iuv.core.HttpMethod
import org.iuv.core.HttpResult
import org.iuv.shared.Task
import org.iuv.test.models.NewPet
import org.iuv.test.models.Pet

class PetStoreApiImpl(private val baseUrl : String = "http://petstore.swagger.io/api") : PetStoreApi {
    private var authentication : Authentication? = null

    override fun authenticate(authentication: Authentication) {
        this.authentication = authentication
    }

    @ImplicitReflectionSerializer
    override fun findPets(tags : List<String>?, limit : Int?) : Task<HttpError,HttpResult<List<Pet>>> {
        val runner = Http.runner(HttpMethod.Get, "$baseUrl/pets")
            .queryParams(
                "tags" to tags,
                "limit" to limit
            )
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(ArrayListSerializer(Pet::class.serializer()))
    }

    @ImplicitReflectionSerializer
    override fun addPet(body : NewPet) : Task<HttpError,HttpResult<Pet>> {
        val runner = Http.runner(HttpMethod.Post, "$baseUrl/pets")
            .body(body, NewPet::class.serializer())
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(Pet::class.serializer())
    }

    @ImplicitReflectionSerializer
    override fun findPetById(id : Long) : Task<HttpError,HttpResult<Pet>> {
        val runner = Http.runner(HttpMethod.Get, "$baseUrl/pets/$id")
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(Pet::class.serializer())
    }

    @ImplicitReflectionSerializer
    override fun deletePet(id : Long) : Task<HttpError,HttpResult<Unit>> {
        val runner = Http.runner(HttpMethod.Delete, "$baseUrl/pets/$id")
        authentication.let {
            if (it != null) {
                runner.configuration(it)
            }
        }
        return runner.run(UnitSerializer)
    }

}